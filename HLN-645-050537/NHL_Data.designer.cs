#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HLN_645_050537
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NLH-645-050537")]
	public partial class NHL_DataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmissionRecord(AdmissionRecord instance);
    partial void UpdateAdmissionRecord(AdmissionRecord instance);
    partial void DeleteAdmissionRecord(AdmissionRecord instance);
    partial void InsertBed(Bed instance);
    partial void UpdateBed(Bed instance);
    partial void DeleteBed(Bed instance);
    partial void InsertExtra(Extra instance);
    partial void UpdateExtra(Extra instance);
    partial void DeleteExtra(Extra instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertSpecialty(Specialty instance);
    partial void UpdateSpecialty(Specialty instance);
    partial void DeleteSpecialty(Specialty instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    #endregion
		
		public NHL_DataDataContext() : 
				base(global::HLN_645_050537.Properties.Settings.Default.NLH_645_050537ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NHL_DataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NHL_DataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NHL_DataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NHL_DataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AdmissionRecord> AdmissionRecords
		{
			get
			{
				return this.GetTable<AdmissionRecord>();
			}
		}
		
		public System.Data.Linq.Table<Bed> Beds
		{
			get
			{
				return this.GetTable<Bed>();
			}
		}
		
		public System.Data.Linq.Table<Extra_Rate> Extra_Rates
		{
			get
			{
				return this.GetTable<Extra_Rate>();
			}
		}
		
		public System.Data.Linq.Table<Extra> Extras
		{
			get
			{
				return this.GetTable<Extra>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Specialty> Specialties
		{
			get
			{
				return this.GetTable<Specialty>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsereDocteur")]
		public int InsereDocteur([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="NChar(4)")] string id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="NChar(30)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="NChar(30)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Specialty", DbType="Int")] System.Nullable<int> specialty)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lastName, firstName, specialty);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdmissionRecords")]
	public partial class AdmissionRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AdmissionID;
		
		private string _PatientID;
		
		private string _BedNumber;
		
		private System.Nullable<bool> _SurgeryScheduled;
		
		private System.Nullable<System.DateTime> _AdmitDate;
		
		private System.Nullable<System.DateTime> _SurgeryDate;
		
		private System.Nullable<System.DateTime> _DischargeDate;
		
		private EntityRef<Extra> _Extra;
		
		private EntityRef<Bed> _Bed;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdmissionIDChanging(string value);
    partial void OnAdmissionIDChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnBedNumberChanging(string value);
    partial void OnBedNumberChanged();
    partial void OnSurgeryScheduledChanging(System.Nullable<bool> value);
    partial void OnSurgeryScheduledChanged();
    partial void OnAdmitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAdmitDateChanged();
    partial void OnSurgeryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSurgeryDateChanged();
    partial void OnDischargeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDischargeDateChanged();
    #endregion
		
		public AdmissionRecord()
		{
			this._Extra = default(EntityRef<Extra>);
			this._Bed = default(EntityRef<Bed>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdmissionID", DbType="NChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AdmissionID
		{
			get
			{
				return this._AdmissionID;
			}
			set
			{
				if ((this._AdmissionID != value))
				{
					this.OnAdmissionIDChanging(value);
					this.SendPropertyChanging();
					this._AdmissionID = value;
					this.SendPropertyChanged("AdmissionID");
					this.OnAdmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedNumber", DbType="NChar(3)")]
		public string BedNumber
		{
			get
			{
				return this._BedNumber;
			}
			set
			{
				if ((this._BedNumber != value))
				{
					if (this._Bed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBedNumberChanging(value);
					this.SendPropertyChanging();
					this._BedNumber = value;
					this.SendPropertyChanged("BedNumber");
					this.OnBedNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryScheduled", DbType="Bit")]
		public System.Nullable<bool> SurgeryScheduled
		{
			get
			{
				return this._SurgeryScheduled;
			}
			set
			{
				if ((this._SurgeryScheduled != value))
				{
					this.OnSurgeryScheduledChanging(value);
					this.SendPropertyChanging();
					this._SurgeryScheduled = value;
					this.SendPropertyChanged("SurgeryScheduled");
					this.OnSurgeryScheduledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdmitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AdmitDate
		{
			get
			{
				return this._AdmitDate;
			}
			set
			{
				if ((this._AdmitDate != value))
				{
					this.OnAdmitDateChanging(value);
					this.SendPropertyChanging();
					this._AdmitDate = value;
					this.SendPropertyChanged("AdmitDate");
					this.OnAdmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SurgeryDate
		{
			get
			{
				return this._SurgeryDate;
			}
			set
			{
				if ((this._SurgeryDate != value))
				{
					this.OnSurgeryDateChanging(value);
					this.SendPropertyChanging();
					this._SurgeryDate = value;
					this.SendPropertyChanged("SurgeryDate");
					this.OnSurgeryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DischargeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DischargeDate
		{
			get
			{
				return this._DischargeDate;
			}
			set
			{
				if ((this._DischargeDate != value))
				{
					this.OnDischargeDateChanging(value);
					this.SendPropertyChanging();
					this._DischargeDate = value;
					this.SendPropertyChanged("DischargeDate");
					this.OnDischargeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdmissionRecord_Extra", Storage="_Extra", ThisKey="AdmissionID", OtherKey="AdmissionRecordID", IsUnique=true, IsForeignKey=false)]
		public Extra Extra
		{
			get
			{
				return this._Extra.Entity;
			}
			set
			{
				Extra previousValue = this._Extra.Entity;
				if (((previousValue != value) 
							|| (this._Extra.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Extra.Entity = null;
						previousValue.AdmissionRecord = null;
					}
					this._Extra.Entity = value;
					if ((value != null))
					{
						value.AdmissionRecord = this;
					}
					this.SendPropertyChanged("Extra");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bed_AdmissionRecord", Storage="_Bed", ThisKey="BedNumber", OtherKey="BedNumber", IsForeignKey=true)]
		public Bed Bed
		{
			get
			{
				return this._Bed.Entity;
			}
			set
			{
				Bed previousValue = this._Bed.Entity;
				if (((previousValue != value) 
							|| (this._Bed.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bed.Entity = null;
						previousValue.AdmissionRecords.Remove(this);
					}
					this._Bed.Entity = value;
					if ((value != null))
					{
						value.AdmissionRecords.Add(this);
						this._BedNumber = value.BedNumber;
					}
					else
					{
						this._BedNumber = default(string);
					}
					this.SendPropertyChanged("Bed");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_AdmissionRecord", Storage="_Patient", ThisKey="PatientID", OtherKey="HealthNumber", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.AdmissionRecords.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.AdmissionRecords.Add(this);
						this._PatientID = value.HealthNumber;
					}
					else
					{
						this._PatientID = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Beds")]
	public partial class Bed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BedNumber;
		
		private string _BedType;
		
		private System.Nullable<bool> _Occupied;
		
		private string _WardName;
		
		private EntitySet<AdmissionRecord> _AdmissionRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBedNumberChanging(string value);
    partial void OnBedNumberChanged();
    partial void OnBedTypeChanging(string value);
    partial void OnBedTypeChanged();
    partial void OnOccupiedChanging(System.Nullable<bool> value);
    partial void OnOccupiedChanged();
    partial void OnWardNameChanging(string value);
    partial void OnWardNameChanged();
    #endregion
		
		public Bed()
		{
			this._AdmissionRecords = new EntitySet<AdmissionRecord>(new Action<AdmissionRecord>(this.attach_AdmissionRecords), new Action<AdmissionRecord>(this.detach_AdmissionRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedNumber", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BedNumber
		{
			get
			{
				return this._BedNumber;
			}
			set
			{
				if ((this._BedNumber != value))
				{
					this.OnBedNumberChanging(value);
					this.SendPropertyChanging();
					this._BedNumber = value;
					this.SendPropertyChanged("BedNumber");
					this.OnBedNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedType", DbType="NChar(15)")]
		public string BedType
		{
			get
			{
				return this._BedType;
			}
			set
			{
				if ((this._BedType != value))
				{
					this.OnBedTypeChanging(value);
					this.SendPropertyChanging();
					this._BedType = value;
					this.SendPropertyChanged("BedType");
					this.OnBedTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupied", DbType="Bit")]
		public System.Nullable<bool> Occupied
		{
			get
			{
				return this._Occupied;
			}
			set
			{
				if ((this._Occupied != value))
				{
					this.OnOccupiedChanging(value);
					this.SendPropertyChanging();
					this._Occupied = value;
					this.SendPropertyChanged("Occupied");
					this.OnOccupiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WardName", DbType="NChar(15)")]
		public string WardName
		{
			get
			{
				return this._WardName;
			}
			set
			{
				if ((this._WardName != value))
				{
					this.OnWardNameChanging(value);
					this.SendPropertyChanging();
					this._WardName = value;
					this.SendPropertyChanged("WardName");
					this.OnWardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bed_AdmissionRecord", Storage="_AdmissionRecords", ThisKey="BedNumber", OtherKey="BedNumber")]
		public EntitySet<AdmissionRecord> AdmissionRecords
		{
			get
			{
				return this._AdmissionRecords;
			}
			set
			{
				this._AdmissionRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Bed = this;
		}
		
		private void detach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Bed = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Extra_Rates")]
	public partial class Extra_Rate
	{
		
		private string _AmenityName;
		
		private System.Nullable<decimal> _DailyCost;
		
		public Extra_Rate()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmenityName", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string AmenityName
		{
			get
			{
				return this._AmenityName;
			}
			set
			{
				if ((this._AmenityName != value))
				{
					this._AmenityName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyCost", DbType="Money")]
		public System.Nullable<decimal> DailyCost
		{
			get
			{
				return this._DailyCost;
			}
			set
			{
				if ((this._DailyCost != value))
				{
					this._DailyCost = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Extras")]
	public partial class Extra : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PatientID;
		
		private string _AdmissionRecordID;
		
		private System.Nullable<bool> _TV;
		
		private System.Nullable<bool> _Phone;
		
		private System.Nullable<bool> _SemiPriivate;
		
		private System.Nullable<bool> _Private;
		
		private EntityRef<AdmissionRecord> _AdmissionRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnAdmissionRecordIDChanging(string value);
    partial void OnAdmissionRecordIDChanged();
    partial void OnTVChanging(System.Nullable<bool> value);
    partial void OnTVChanged();
    partial void OnPhoneChanging(System.Nullable<bool> value);
    partial void OnPhoneChanged();
    partial void OnSemiPriivateChanging(System.Nullable<bool> value);
    partial void OnSemiPriivateChanged();
    partial void OnPrivateChanging(System.Nullable<bool> value);
    partial void OnPrivateChanged();
    #endregion
		
		public Extra()
		{
			this._AdmissionRecord = default(EntityRef<AdmissionRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdmissionRecordID", DbType="NChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AdmissionRecordID
		{
			get
			{
				return this._AdmissionRecordID;
			}
			set
			{
				if ((this._AdmissionRecordID != value))
				{
					if (this._AdmissionRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdmissionRecordIDChanging(value);
					this.SendPropertyChanging();
					this._AdmissionRecordID = value;
					this.SendPropertyChanged("AdmissionRecordID");
					this.OnAdmissionRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TV", DbType="Bit")]
		public System.Nullable<bool> TV
		{
			get
			{
				return this._TV;
			}
			set
			{
				if ((this._TV != value))
				{
					this.OnTVChanging(value);
					this.SendPropertyChanging();
					this._TV = value;
					this.SendPropertyChanged("TV");
					this.OnTVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Bit")]
		public System.Nullable<bool> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemiPriivate", DbType="Bit")]
		public System.Nullable<bool> SemiPriivate
		{
			get
			{
				return this._SemiPriivate;
			}
			set
			{
				if ((this._SemiPriivate != value))
				{
					this.OnSemiPriivateChanging(value);
					this.SendPropertyChanging();
					this._SemiPriivate = value;
					this.SendPropertyChanged("SemiPriivate");
					this.OnSemiPriivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Private", DbType="Bit")]
		public System.Nullable<bool> Private
		{
			get
			{
				return this._Private;
			}
			set
			{
				if ((this._Private != value))
				{
					this.OnPrivateChanging(value);
					this.SendPropertyChanging();
					this._Private = value;
					this.SendPropertyChanged("Private");
					this.OnPrivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdmissionRecord_Extra", Storage="_AdmissionRecord", ThisKey="AdmissionRecordID", OtherKey="AdmissionID", IsForeignKey=true)]
		public AdmissionRecord AdmissionRecord
		{
			get
			{
				return this._AdmissionRecord.Entity;
			}
			set
			{
				AdmissionRecord previousValue = this._AdmissionRecord.Entity;
				if (((previousValue != value) 
							|| (this._AdmissionRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdmissionRecord.Entity = null;
						previousValue.Extra = null;
					}
					this._AdmissionRecord.Entity = value;
					if ((value != null))
					{
						value.Extra = this;
						this._AdmissionRecordID = value.AdmissionID;
					}
					else
					{
						this._AdmissionRecordID = default(string);
					}
					this.SendPropertyChanged("AdmissionRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Login
	{
		
		private string _UserName;
		
		private string _Password;
		
		public Login()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(30)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HealthNumber;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _Address;
		
		private string _City;
		
		private string _Province;
		
		private string _PostalCode;
		
		private string _Phone;
		
		private System.Nullable<char> _InsuranceCompany;
		
		private string _InsuranceNumber;
		
		private string _NextOfKin;
		
		private string _NextOfKinRelationship;
		
		private string _Doctor;
		
		private EntitySet<AdmissionRecord> _AdmissionRecords;
		
		private EntityRef<Doctor> _Doctor1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHealthNumberChanging(string value);
    partial void OnHealthNumberChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnInsuranceCompanyChanging(System.Nullable<char> value);
    partial void OnInsuranceCompanyChanged();
    partial void OnInsuranceNumberChanging(string value);
    partial void OnInsuranceNumberChanged();
    partial void OnNextOfKinChanging(string value);
    partial void OnNextOfKinChanged();
    partial void OnNextOfKinRelationshipChanging(string value);
    partial void OnNextOfKinRelationshipChanged();
    partial void OnDoctorChanging(string value);
    partial void OnDoctorChanged();
    #endregion
		
		public Patient()
		{
			this._AdmissionRecords = new EntitySet<AdmissionRecord>(new Action<AdmissionRecord>(this.attach_AdmissionRecords), new Action<AdmissionRecord>(this.detach_AdmissionRecords));
			this._Doctor1 = default(EntityRef<Doctor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthNumber", DbType="NChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HealthNumber
		{
			get
			{
				return this._HealthNumber;
			}
			set
			{
				if ((this._HealthNumber != value))
				{
					this.OnHealthNumberChanging(value);
					this.SendPropertyChanging();
					this._HealthNumber = value;
					this.SendPropertyChanged("HealthNumber");
					this.OnHealthNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(30)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NChar(30)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="NChar(15)")]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NChar(7)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NChar(14)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceCompany", DbType="NChar(1)")]
		public System.Nullable<char> InsuranceCompany
		{
			get
			{
				return this._InsuranceCompany;
			}
			set
			{
				if ((this._InsuranceCompany != value))
				{
					this.OnInsuranceCompanyChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCompany = value;
					this.SendPropertyChanged("InsuranceCompany");
					this.OnInsuranceCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceNumber", DbType="NChar(15)")]
		public string InsuranceNumber
		{
			get
			{
				return this._InsuranceNumber;
			}
			set
			{
				if ((this._InsuranceNumber != value))
				{
					this.OnInsuranceNumberChanging(value);
					this.SendPropertyChanging();
					this._InsuranceNumber = value;
					this.SendPropertyChanged("InsuranceNumber");
					this.OnInsuranceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextOfKin", DbType="NChar(30)")]
		public string NextOfKin
		{
			get
			{
				return this._NextOfKin;
			}
			set
			{
				if ((this._NextOfKin != value))
				{
					this.OnNextOfKinChanging(value);
					this.SendPropertyChanging();
					this._NextOfKin = value;
					this.SendPropertyChanged("NextOfKin");
					this.OnNextOfKinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextOfKinRelationship", DbType="NChar(10)")]
		public string NextOfKinRelationship
		{
			get
			{
				return this._NextOfKinRelationship;
			}
			set
			{
				if ((this._NextOfKinRelationship != value))
				{
					this.OnNextOfKinRelationshipChanging(value);
					this.SendPropertyChanging();
					this._NextOfKinRelationship = value;
					this.SendPropertyChanged("NextOfKinRelationship");
					this.OnNextOfKinRelationshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor", DbType="NChar(4)")]
		public string Doctor
		{
			get
			{
				return this._Doctor;
			}
			set
			{
				if ((this._Doctor != value))
				{
					if (this._Doctor1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorChanging(value);
					this.SendPropertyChanging();
					this._Doctor = value;
					this.SendPropertyChanged("Doctor");
					this.OnDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_AdmissionRecord", Storage="_AdmissionRecords", ThisKey="HealthNumber", OtherKey="PatientID")]
		public EntitySet<AdmissionRecord> AdmissionRecords
		{
			get
			{
				return this._AdmissionRecords;
			}
			set
			{
				this._AdmissionRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Patient", Storage="_Doctor1", ThisKey="Doctor", OtherKey="DoctorID", IsForeignKey=true)]
		public Doctor Doctor1
		{
			get
			{
				return this._Doctor1.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor1.Entity;
				if (((previousValue != value) 
							|| (this._Doctor1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor1.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Doctor1.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._Doctor = value.DoctorID;
					}
					else
					{
						this._Doctor = default(string);
					}
					this.SendPropertyChanged("Doctor1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialty")]
	public partial class Specialty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecialtyID;
		
		private string _Specialty1;
		
		private EntitySet<Doctor> _Doctors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecialtyIDChanging(int value);
    partial void OnSpecialtyIDChanged();
    partial void OnSpecialty1Changing(string value);
    partial void OnSpecialty1Changed();
    #endregion
		
		public Specialty()
		{
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialtyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecialtyID
		{
			get
			{
				return this._SpecialtyID;
			}
			set
			{
				if ((this._SpecialtyID != value))
				{
					this.OnSpecialtyIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialtyID = value;
					this.SendPropertyChanged("SpecialtyID");
					this.OnSpecialtyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Specialty", Storage="_Specialty1", DbType="NChar(30)")]
		public string Specialty1
		{
			get
			{
				return this._Specialty1;
			}
			set
			{
				if ((this._Specialty1 != value))
				{
					this.OnSpecialty1Changing(value);
					this.SendPropertyChanging();
					this._Specialty1 = value;
					this.SendPropertyChanged("Specialty1");
					this.OnSpecialty1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialty_Doctor", Storage="_Doctors", ThisKey="SpecialtyID", OtherKey="Specialty")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Specialty1 = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Specialty1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctors")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DoctorID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private System.Nullable<int> _Specialty;
		
		private EntitySet<Patient> _Patients;
		
		private EntityRef<Specialty> _Specialty1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorIDChanging(string value);
    partial void OnDoctorIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSpecialtyChanging(System.Nullable<int> value);
    partial void OnSpecialtyChanged();
    #endregion
		
		public Doctor()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Specialty1 = default(EntityRef<Specialty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="NChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(30)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialty", DbType="Int")]
		public System.Nullable<int> Specialty
		{
			get
			{
				return this._Specialty;
			}
			set
			{
				if ((this._Specialty != value))
				{
					if (this._Specialty1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialtyChanging(value);
					this.SendPropertyChanging();
					this._Specialty = value;
					this.SendPropertyChanged("Specialty");
					this.OnSpecialtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Patient", Storage="_Patients", ThisKey="DoctorID", OtherKey="Doctor")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialty_Doctor", Storage="_Specialty1", ThisKey="Specialty", OtherKey="SpecialtyID", IsForeignKey=true)]
		public Specialty Specialty1
		{
			get
			{
				return this._Specialty1.Entity;
			}
			set
			{
				Specialty previousValue = this._Specialty1.Entity;
				if (((previousValue != value) 
							|| (this._Specialty1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialty1.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._Specialty1.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._Specialty = value.SpecialtyID;
					}
					else
					{
						this._Specialty = default(Nullable<int>);
					}
					this.SendPropertyChanged("Specialty1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Doctor1 = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Doctor1 = null;
		}
	}
}
#pragma warning restore 1591
